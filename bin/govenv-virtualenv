#!/usr/bin/env bash
#
# Summary: Create a Python virtualenv using the govenv-virtualenv plugin
#
# Usage: govenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version] <virtualenv-name>
#        govenv virtualenv --version
#        govenv virtualenv --help
#
#   -f/--force       Install even if the version appears to be installed already
#

GOVEVN_CWD="$(pwd)"

set -e
[ -n "$GOVENV_DEBUG" ] && set -x

if [ -z "${GOVENV_ROOT}" ]; then
  GOVENV_ROOT="$(govenv-root)"
fi

# Provide govenv completions
if [ "$1" = "--complete" ]; then
  exec govenv-versions --bare
fi

# Define library functions
parse_options() {
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$(($index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

usage() {
  # We can remove the sed fallback once govenv 0.2.0 is widely available.
  govenv-help virtualenv 2>/dev/null || sed -ne '/^#/!q;s/.//;s/.//;1,4d;p' < "$0"
  if [ -n "${USE_CONDA}" ]; then
    govenv-exec conda create --help 2>/dev/null || true
  else
    if [ -n "${USE_M_VENV}" ]; then
      govenv-exec python -m venv --help 2>/dev/null || true
    else
      govenv-exec virtualenv --help 2>/dev/null || true
    fi
  fi
  [ -z "$1" ] || exit "$1"
}

VIRTUALENV_OPTIONS=()

unset FORCE
unset QUIET
unset VERBOSE

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "f" | "force" )
    FORCE=true
    ;;
  "h" | "help" )
    usage 0
    ;;
  "q" | "quiet" )
    QUIET="--quiet"
    ;;
  "v" | "verbose" )
    VERBOSE="--verbose"
    ;;
  esac
done

if [[ "${#ARGUMENTS[@]}" == 0 ]]; then
  echo "govenv-virtualenv: no virtualenv name given." 1>&2
  exit 1
elif [[ "${#ARGUMENTS[@]}" == 1 ]]; then
  # If only one argument given, use current version as source version
  OLDIFS="${IFS}"
  IFS=:
  VERSION_NAMES=($(govenv-version-name))
  IFS="${OLDIFS}"
  VERSION_NAME="${VERSION_NAMES}"
  VIRTUALENV_NAME="${ARGUMENTS[0]}"
else
  # Otherwise, use former as source version, and latter as virtualenv version
  VERSION_NAME="${ARGUMENTS[0]}"
  VIRTUALENV_NAME="${ARGUMENTS[1]}"
fi

if [ -z "${VERSION_NAME}" ] || [ -z "${VIRTUALENV_NAME}" ]; then
  usage 1
fi

if [[ "${VIRTUALENV_NAME##*/}" == "system" ]]; then
  echo "govenv-virtualenv: \`system' is not allowed as virtualenv name." 1>&2
  exit 1
fi

if [ "$VIRTUALENV_NAME" != "${VIRTUALENV_NAME%[[:space:]]*}" ]; then
  echo "govenv-virtualenv: no whitespace allowed in virtualenv name." 1>&2
  exit 1
fi

if [ "${VIRTUALENV_NAME}" != "${VIRTUALENV_NAME%/*}" ] && [[ "${VIRTUALENV_NAME}" != "${VERSION_NAME%%/*}/envs/${VIRTUALENV_NAME##*/}" ]] ; then
  echo "govenv-virtualenv: no slash allowed in virtualenv name." 1>&2
  exit 1
fi

# Set VERSION_NAME as default version in this script
export GOVENV_VERSION="${VERSION_NAME}"

# Source version must exist before creating virtualenv.
PREFIX="$(govenv-prefix 2>/dev/null || true)"
if [ ! -d "${PREFIX}" ]; then
  echo "govenv-virtualenv: \`${GOVENV_VERSION}' is not installed in govenv." 1>&2
  exit 1
fi

# Not create `system/envs` directory even if source version is `system`
if [[ "${VERSION_NAME%/envs/*}" == "system" ]]; then
  VIRTUALENV_NAME="${VIRTUALENV_NAME##*/}"
else
  VIRTUALENV_PREFIX="$(govenv-virtualenv-prefix 2>/dev/null || true)"
  if [[ "${VIRTUALENV_PREFIX%/*}" == "${GOVENV_ROOT}/versions" ]]; then
    VIRTUALENV_NAME="${VIRTUALENV_PREFIX#${GOVENV_ROOT}/versions/}/envs/${VIRTUALENV_NAME##*/}"
  else
    # In standard situation will executed this line
    VIRTUALENV_NAME="${VERSION_NAME}/envs/${VIRTUALENV_NAME##*/}"
  fi
fi

VIRTUALENV_PATH="${GOVENV_ROOT}/versions/${VIRTUALENV_NAME}"
if [[ "${VIRTUALENV_PATH/*/envs/*}" != "${GOVENV_ROOT}/versions" ]]; then
  COMPAT_VIRTUALENV_PATH="${GOVENV_ROOT}/versions/${VIRTUALENV_NAME##*/}"
fi

if [ -n "${COMPAT_VIRTUALENV_PATH}" ]; then
  if [ -e "${COMPAT_VIRTUALENV_PATH}" ] || [ -L "${COMPAT_VIRTUALENV_PATH}" ]; then
    echo "govenv-virtualenv: \`${COMPAT_VIRTUALENV_PATH}' already exists." 1>&2
    exit 1
  fi
fi

# Unset environment variables which start with `VIRTUALENV_`.
# These variables are reserved for virtualenv.
unset VIRTUALENV_VERSION

# Define `before_virtualenv` and `after_virtualenv` functions that allow
# plugin hooks to register a string of code for execution before or
# after the installation process.
declare -a before_hooks after_hooks

before_virtualenv() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_virtualenv() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

# Load plugin hooks.
OLDIFS="$IFS"
IFS=$'\n' scripts=(`govenv-hooks virtualenv`)
IFS="$OLDIFS"
for script in "${scripts[@]}"; do source "$script"; done


[ -d "${VIRTUALENV_PATH}" ] && PREFIX_EXISTS=1

# If the virtualenv exists, prompt for confirmation unless
# the --force option was specified.
if [ -f "${VIRTUALENV_PATH}/${VIRTUALENV_NAME}/govenv.cfg" ]; then
  if [ -z "$FORCE" ]; then
    echo "govenv-virtualenv: ${VIRTUALENV_PATH} already exists" 1>&2
    read -p "continue with installation? (y/N) "

    case "$REPLY" in
    y* | Y* ) ;;
    * ) exit 1 ;;
    esac
  fi
fi

# Execute `before_virtualenv` hooks.
for hook in "${before_hooks[@]}"; do eval "$hook"; done

# Plan cleanup on unsuccessful installation.
cleanup() {
  [ -z "${PREFIX_EXISTS}" ] && rm -rf "$VIRTUALENV_PATH"
}

trap cleanup SIGINT

# Invoke virtualenv and record exit status in $STATUS.
STATUS=0

mkdir -p "${GOVEVN_CWD}/${VIRTUALENV_NAME##*/}"
CFG_PATH="${GOVEVN_CWD}/${VIRTUALENV_NAME##*/}/govenv.cfg"
touch "${CFG_PATH}"
cat <<EOT >> "${CFG_PATH}"
home = ${GOVENV_ROOT}/versions/${GOVENV_VERSION}/bin
version = ${GOVENV_VERSION}
EOT

## Create symlink in the `versions` directory for backward compatibility
if [ -n "${VIRTUALENV_PATH}" ] && [ -n "${COMPAT_VIRTUALENV_PATH}" ] && [ -d "${GOVEVN_CWD}/${VIRTUALENV_NAME##*/}" ]; then
  ln -fs "${VIRTUALENV_PATH}" "${COMPAT_VIRTUALENV_PATH}"
  ln -fs "${GOVEVN_CWD}/${VIRTUALENV_NAME##*/}" "${VIRTUALENV_PATH}"
fi

# Execute `after_virtualenv` hooks.
for hook in "${after_hooks[@]}"; do eval "$hook"; done

# Run `govenv-rehash` after a successful installation.
if [ "$STATUS" == "0" ]; then
  govenv-rehash
else
  cleanup
fi

exit "$STATUS"
